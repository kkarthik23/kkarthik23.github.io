<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DevOps on Hugo Ivy</title>
    <link>https://kkarthik23.github.io/tags/devops/</link>
    <description>Recent content in DevOps on Hugo Ivy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Aug 2019 21:57:42 +0000</lastBuildDate>
    
	<atom:link href="https://kkarthik23.github.io/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Jenkins</title>
      <link>https://kkarthik23.github.io/post/2019/08/12/jenkins/</link>
      <pubDate>Mon, 12 Aug 2019 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2019/08/12/jenkins/</guid>
      <description>Jenkins Install Jenkins on Windows
Login there will be an initial password at C:\Program Files (x86)\Jenkins\secrets
Use this to login and change the password
Goto Manange Jenkins, Manage Plugins
Add Windows Powershell Plugin
New item choose freestyle project and give a name for project
Then select this project is parameterized and choose add parameter and select string parameter and choice parameter
Choice parameter
In Build add build step and choose powershell</description>
    </item>
    
    <item>
      <title>AWS CLI</title>
      <link>https://kkarthik23.github.io/post/2019/08/10/aws-cli/</link>
      <pubDate>Sat, 10 Aug 2019 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2019/08/10/aws-cli/</guid>
      <description> AWS PowerShell Install-Module -Name AWSPowerShell Import-Module AWSPowerShell Get-Command -Module AWSPowerShell Get-AWSCredential -ListProfileDetail New-AWSCredential -AccessKey xxxx -SecretKey yyyy -ProfileName aws-acct-prod  </description>
    </item>
    
    <item>
      <title>Graylog</title>
      <link>https://kkarthik23.github.io/post/2019/07/30/graylog/</link>
      <pubDate>Tue, 30 Jul 2019 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2019/07/30/graylog/</guid>
      <description>Install Graylog
type this in console of graylog server echo &amp;ldquo;Hello Graylog, let&amp;rsquo;s be friends.&amp;rdquo; | nc -w 1 -u 127.0.0.1 5555
Goto System Inputs The input would be raw plaintext udp
conf file is /etc/graylog/server/server.conf
for changing password echo -n password | shasum -a 256
8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
For sending logs using filebeat sidecar config file is located at /etc/graylog/sidecar/sidecar.yml add api key to connect sidecar to graylog server server_api_token The token can be generated from graylog on the users area</description>
    </item>
    
    <item>
      <title>Minikube</title>
      <link>https://kkarthik23.github.io/post/2019/07/11/minikube/</link>
      <pubDate>Thu, 11 Jul 2019 15:20:00 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2019/07/11/minikube/</guid>
      <description>Minikube on Windows Install minikube for Windows on Windows (not the Linux version in WSL, it wonâ€™t work).
Install docker on WSL
```
Update the apt package list. sudo apt-get update -y
Install Docker&amp;rsquo;s package dependencies. sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
Download and add Docker&amp;rsquo;s official public PGP key. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
Verify the fingerprint. sudo apt-key fingerprint 0EBFCD88
Update the apt package list (for the new apt repo).</description>
    </item>
    
    <item>
      <title>VirtualBox</title>
      <link>https://kkarthik23.github.io/post/2019/06/23/virtualbox/</link>
      <pubDate>Sun, 23 Jun 2019 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2019/06/23/virtualbox/</guid>
      <description>VirtualBox Requirement to access internet as well as the hosts Best option is to go for NAT network
For centos set statis IP addr,netmask and gateway here
sudo vi /etc/sysconfig/network-scripts/ifcfg-enp0s3 ifdown ifcfg-enp0s3 ifup ifcfg-enp0s3  Mount iso after downloading it Guest Additions ISO file In Virtual Box add c:\Temp in shared folder option and select auto mount yum install gcc kernel-devel kernel-headers dkms make bzip2 perl KERN_DIR=/usr/src/kernels/`uname -r`-`uname -m` export KERN_DIR # mount -r /dev/cdrom /media # cd /media/ # .</description>
    </item>
    
    <item>
      <title>Multipass</title>
      <link>https://kkarthik23.github.io/post/2019/06/22/multipass/</link>
      <pubDate>Sat, 22 Jun 2019 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2019/06/22/multipass/</guid>
      <description>Multipass is from Ubuntu and lets you spin up Ubuntu instances
multipass launch multipass launcu -n test multipass launch --name k3s --mem 1G --disk 1G multipass list multipass delete instancename multipass purge multipass help  </description>
    </item>
    
    <item>
      <title>Packer</title>
      <link>https://kkarthik23.github.io/post/2019/06/16/packer/</link>
      <pubDate>Sun, 16 Jun 2019 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2019/06/16/packer/</guid>
      <description>Packer is from HashiCorp and is another provisioning tool
a packer folder in where packer.exe resides on Windows will contain
1.variables.json 2.template.json 3.provision.sh  variables.json will contain access key info
{ &amp;quot;aws_access_key&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;aws_secret_key&amp;quot;: &amp;quot;&amp;quot; }  We are using a debian 9 stretch ami and provisioning it
template.json
{ &amp;quot;variables&amp;quot;: { &amp;quot;aws_access_key&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;aws_secret_key&amp;quot;: &amp;quot;&amp;quot; }, &amp;quot;builders&amp;quot;: [{ &amp;quot;type&amp;quot;: &amp;quot;amazon-ebs&amp;quot;, &amp;quot;access_key&amp;quot;: &amp;quot;{{user `aws_access_key`}}&amp;quot;, &amp;quot;secret_key&amp;quot;: &amp;quot;{{user `aws_secret_key`}}&amp;quot;, &amp;quot;region&amp;quot;: &amp;quot;us-east-1&amp;quot;, &amp;quot;source_ami&amp;quot;: &amp;quot;ami-003f19e0e687de1cd&amp;quot;, &amp;quot;instance_type&amp;quot;: &amp;quot;t2.</description>
    </item>
    
    <item>
      <title>Terraform Part 1</title>
      <link>https://kkarthik23.github.io/post/2019/06/10/terraform-part-1/</link>
      <pubDate>Mon, 10 Jun 2019 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2019/06/10/terraform-part-1/</guid>
      <description>Terraform is an infrastucture orcherstation tool Download from HashiCorp some of the commands are
terraform init terraform plan terraform apply terraform destroy  example.tf file which sets up an instance in a vpc and a subnet in a region after access key and secret key are provided
 provider &amp;quot;aws&amp;quot; { access_key = &amp;quot;&amp;quot; secret_key = &amp;quot;&amp;quot; region = &amp;quot;us-east-1&amp;quot; } resource &amp;quot;aws_instance&amp;quot; &amp;quot;example&amp;quot; { ami = &amp;quot;ami-0c6b1d09930fac512&amp;quot; instance_type = &amp;quot;t2.</description>
    </item>
    
    <item>
      <title>AWS</title>
      <link>https://kkarthik23.github.io/post/2019/05/30/aws/</link>
      <pubDate>Thu, 30 May 2019 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2019/05/30/aws/</guid>
      <description>EBS EBS is Elastic Block Service and deals with block storage
Volumes
Snapshots
To recover from an issue make sure snapshots are enabled and recover from it.
So from snapshots create an image, from the image launch an instance and then login to instance to check.
To create an AMI from your root volume using the console
Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/. In the navigation pane, choose Elastic Block Store, Snapshots.</description>
    </item>
    
    <item>
      <title>Python setup windows</title>
      <link>https://kkarthik23.github.io/post/2019/05/20/python-setup-windows/</link>
      <pubDate>Mon, 20 May 2019 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2019/05/20/python-setup-windows/</guid>
      <description>For Windows, virtualenv venv creates a virtual environment However, activating the environment requires a slightly different command.
Assuming that you are in your project directory:
C:\Users\SomeUser\project_folder&amp;gt; venv\Scripts\activate or source venv/bin/activate (if Linux)
Install packages using the pip command:
$ pip install requests $ deactivate
for reactivating it is venv\Scripts\activate
AWS app deploy using Boto Before you can deploy an application, be sure you have credentials configured. If you have previously configured your machine to run boto3 (the AWS SDK for Python) or the AWS CLI then you can skip this section.</description>
    </item>
    
    <item>
      <title>Ansible Part 1</title>
      <link>https://kkarthik23.github.io/post/2018/05/20/ansible-part-1/</link>
      <pubDate>Sun, 20 May 2018 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2018/05/20/ansible-part-1/</guid>
      <description>Set up an AWS instance
Download the ssh key for the user which is a pem key then use Putty Gen to import the pem key and save it as a ppk key Then use ec2-user@instancename on port 22 and save session In auth filed use the ppk key to connect
EPEL Release epel-release is available in Amazon Linux Extra topic &amp;ldquo;epel&amp;rdquo;
To use, run sudo amazon-linux-extras install epel</description>
    </item>
    
    <item>
      <title>Prometheus</title>
      <link>https://kkarthik23.github.io/post/2017/12/11/prometheus/</link>
      <pubDate>Mon, 11 Dec 2017 15:20:00 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2017/12/11/prometheus/</guid>
      <description>Prometheus Install Docker Install
at &amp;lt;&amp;lt;EOF &amp;gt; prometheus.yml global: scrape_interval: 10s evaluation_interval: 10s scrape_configs: - job_name: &#39;prometheus&#39; static_configs: - targets: [&#39;localhost:9090&#39;] EOF This tells the Prometheus server to scrape itself on port 9090. Now let&#39;s create a Dockerfile that adds this on top of the prom/prometheus image: cat &amp;lt;&amp;lt;EOF &amp;gt; Dockerfile FROM prom/prometheus # Add in the configuration file from the local directory. ADD prometheus.yml /etc/prometheus/prometheus.yml EOF  Next we can build and run it:</description>
    </item>
    
  </channel>
</rss>