<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Hugo Ivy</title>
    <link>https://kkarthik23.github.io/categories/linux/</link>
    <description>Recent content in Linux on Hugo Ivy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 23 Jun 2019 21:57:42 +0000</lastBuildDate>
    
	<atom:link href="https://kkarthik23.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>VirtualBox</title>
      <link>https://kkarthik23.github.io/post/2019/06/23/virtualbox/</link>
      <pubDate>Sun, 23 Jun 2019 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2019/06/23/virtualbox/</guid>
      <description> VirtualBox Requirement to access internet as well as the hosts Best option is to go for NAT network
For centos set statis IP addr,netmask and gateway here
sudo vi /etc/sysconfig/network-scripts/ifcfg-enp0s3 ifdown ifcfg-enp0s3 ifup ifcfg-enp0s3  </description>
    </item>
    
    <item>
      <title>Multipass</title>
      <link>https://kkarthik23.github.io/post/2019/06/22/multipass/</link>
      <pubDate>Sat, 22 Jun 2019 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2019/06/22/multipass/</guid>
      <description>Multipass is from Ubuntu and lets you spin up Ubuntu instances
multipass launch multipass launcu -n test multipass launch --name k3s --mem 1G --disk 1G multipass list multipass delete instancename multipass purge multipass help  </description>
    </item>
    
    <item>
      <title>Packer</title>
      <link>https://kkarthik23.github.io/post/2019/06/16/packer/</link>
      <pubDate>Sun, 16 Jun 2019 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2019/06/16/packer/</guid>
      <description>Packer is from HashiCorp and is another provisioning tool
a packer folder in where packer.exe resides on Windows will contain
1.variables.json 2.template.json 3.provision.sh  variables.json will contain access key info
{ &amp;quot;aws_access_key&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;aws_secret_key&amp;quot;: &amp;quot;&amp;quot; }  We are using a debian 9 stretch ami and provisioning it
template.json
{ &amp;quot;variables&amp;quot;: { &amp;quot;aws_access_key&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;aws_secret_key&amp;quot;: &amp;quot;&amp;quot; }, &amp;quot;builders&amp;quot;: [{ &amp;quot;type&amp;quot;: &amp;quot;amazon-ebs&amp;quot;, &amp;quot;access_key&amp;quot;: &amp;quot;{{user `aws_access_key`}}&amp;quot;, &amp;quot;secret_key&amp;quot;: &amp;quot;{{user `aws_secret_key`}}&amp;quot;, &amp;quot;region&amp;quot;: &amp;quot;us-east-1&amp;quot;, &amp;quot;source_ami&amp;quot;: &amp;quot;ami-003f19e0e687de1cd&amp;quot;, &amp;quot;instance_type&amp;quot;: &amp;quot;t2.</description>
    </item>
    
    <item>
      <title>Terraform Part 1</title>
      <link>https://kkarthik23.github.io/post/2019/06/10/terraform-part-1/</link>
      <pubDate>Mon, 10 Jun 2019 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2019/06/10/terraform-part-1/</guid>
      <description>Terraform is an infrastucture orcherstation tool Download from HashiCorp some of the commands are
terraform init terraform plan terraform apply terraform destroy  example.tf file which sets up an instance in a vpc and a subnet in a region after access key and secret key are provided
 provider &amp;quot;aws&amp;quot; { access_key = &amp;quot;&amp;quot; secret_key = &amp;quot;&amp;quot; region = &amp;quot;us-east-1&amp;quot; } resource &amp;quot;aws_instance&amp;quot; &amp;quot;example&amp;quot; { ami = &amp;quot;ami-0c6b1d09930fac512&amp;quot; instance_type = &amp;quot;t2.</description>
    </item>
    
    <item>
      <title>Ansible Part 1</title>
      <link>https://kkarthik23.github.io/post/2018/05/20/ansible-part-1/</link>
      <pubDate>Sun, 20 May 2018 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2018/05/20/ansible-part-1/</guid>
      <description>Set up an AWS instance
Download the ssh key for the user which is a pem key then use Putty Gen to import the pem key and save it as a ppk key Then use ec2-user@instancename on port 22 and save session In auth filed use the ppk key to connect
EPEL Release epel-release is available in Amazon Linux Extra topic &amp;ldquo;epel&amp;rdquo;
To use, run sudo amazon-linux-extras install epel</description>
    </item>
    
  </channel>
</rss>