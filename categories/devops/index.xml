<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Devops on Hugo Ivy</title>
    <link>https://kkarthik23.github.io/categories/devops/</link>
    <description>Recent content in Devops on Hugo Ivy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Aug 2019 21:57:42 +0000</lastBuildDate>
    
	<atom:link href="https://kkarthik23.github.io/categories/devops/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>BitBucket</title>
      <link>https://kkarthik23.github.io/post/2019/08/06/bitbucket/</link>
      <pubDate>Tue, 06 Aug 2019 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2019/08/06/bitbucket/</guid>
      <description> BitBucket start Create a new account in BitBucket Create a new repository on BitBucket Clone the repository git clone https://username@bitbucket.org/username/test.git git remote add origin https://kkarthik23@bitbucket.org/kkarthik23/powershell.git git add . git commit -m &amp;quot;Initial commit&amp;quot; git push -u origin master  To commit changes for new file git add TestFile.txt git commit -m &amp;quot;updated file&amp;quot; git push - u origin master  </description>
    </item>
    
    <item>
      <title>Grafana</title>
      <link>https://kkarthik23.github.io/post/2018/04/06/grafana/</link>
      <pubDate>Fri, 06 Apr 2018 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2018/04/06/grafana/</guid>
      <description>Install  Redhat &amp;amp; Centos(64 Bit) wget https://s3-us-west-2.amazonaws.com/grafana-releases/release/grafana-5.1.3-1.x86_64.rpm sudo yum localinstall grafana-5.1.3-1.x86_64.rpm sudo systemctl enable grafana-server.service sudo systemctl start grafana-server  Test using this URL or the corresponding IP address
http://localhost:3000  A number of integrations available for example for integrating with Prometheus,InfluDB,Zabbix etc.</description>
    </item>
    
    <item>
      <title>APM tools</title>
      <link>https://kkarthik23.github.io/post/2017/12/12/apm-tools/</link>
      <pubDate>Tue, 12 Dec 2017 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2017/12/12/apm-tools/</guid>
      <description>APM Application Performance Tools are crucial in monitoring the performance of applications.
They give a better insight into the behaviour of your applications and are worth it.
New Relic is the most well known one but there are others in the market as well.
Example This the top 5 memory consumers of w3p processes in an IIS web server.
New Relic has a few criteria for mesuring app performance</description>
    </item>
    
    <item>
      <title>GIT and Vagrant</title>
      <link>https://kkarthik23.github.io/post/2017/08/06/git-and-vagrant/</link>
      <pubDate>Sun, 06 Aug 2017 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2017/08/06/git-and-vagrant/</guid>
      <description>GIT GIT is a Distributed Version Control System Some commands are
create a new repository on the command line echo &amp;ldquo;# website&amp;rdquo; &amp;gt;&amp;gt; README.md
git init git add README.md git commit -m &amp;quot;first commit&amp;quot; git remote add origin https://github.com/Username/website.git git push -u origin master  or push an existing repository from the command line git remote add origin https://github.com/Username/website.git git push -u origin master  View remote and remove git remote -v git remote rm destination git remote -v  BitBucket Step 1:Push your local repo cd /path/to/your/repo  Step 2: Connect your existing repository to Bitbucket git remote add origin https://username@bitbucket.</description>
    </item>
    
    <item>
      <title>A Case for Software Load Balancing</title>
      <link>https://kkarthik23.github.io/post/2016/11/12/a-case-for-software-load-balancing/</link>
      <pubDate>Sat, 12 Nov 2016 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2016/11/12/a-case-for-software-load-balancing/</guid>
      <description>You can run software load balancers on commodity hardware.
Plus virtualisation,containers like docker and tools like puppet and ansible help to leverage software load balancer to the maximum extent.
Unless your requirement is really really big software load balancers should suffice. Nginx does a good job and you can go with Nginx plus for paid support,more features and peace of mind.
There is good documentation on the Nginx website and so I will not be repeating the steps.</description>
    </item>
    
  </channel>
</rss>on EC2 console at https://console.aws.amazon.com/ec2/. In the navigation pane, choose Elastic Block Store, Snapshots.</description>
    </item>
    
    <item>
      <title>Python setup windows</title>
      <link>https://kkarthik23.github.io/post/2019/05/20/python-setup-windows/</link>
      <pubDate>Mon, 20 May 2019 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2019/05/20/python-setup-windows/</guid>
      <description>For Windows, virtualenv venv creates a virtual environment However, activating the environment requires a slightly different command.
Assuming that you are in your project directory:
C:\Users\SomeUser\project_folder&amp;gt; venv\Scripts\activate or source venv/bin/activate (if Linux)
Install packages using the pip command:
$ pip install requests $ deactivate
for reactivating it is venv\Scripts\activate
AWS app deploy using Boto Before you can deploy an application, be sure you have credentials configured. If you have previously configured your machine to run boto3 (the AWS SDK for Python) or the AWS CLI then you can skip this section.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://kkarthik23.github.io/post/2019/04/20/docker/</link>
      <pubDate>Sat, 20 Apr 2019 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2019/04/20/docker/</guid>
      <description>Docker containers
Install Docker CE(Community Edition) $ sudo yum install -y yum-utils \ device-mapper-persistent-data \ lvm2$ sudo yum-config-manager \ $ sudo yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo $ sudo yum install docker-ce docker-ce-cli containerd.io $ sudo systemctl start docker $ sudo systemctl enable docker (start at boot) $ sudo docker run hello-world (pulls image from docker libaray and indicates docker is working okay)  Above command displays the below
Unable to find image &#39;hello-world:latest&#39; locally latest: Pulling from library/hello-world 1b930d010525: Pull complete Digest: sha256:92695bc579f31df7a63da6922075d0666e565ceccad16b59c3374d2cf4e8e50e Status: Downloaded newer image for hello-world:latest Hello from Docker!</description>
    </item>
    
    <item>
      <title>Prometheus</title>
      <link>https://kkarthik23.github.io/post/2017/12/11/prometheus/</link>
      <pubDate>Mon, 11 Dec 2017 15:20:00 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2017/12/11/prometheus/</guid>
      <description>Prometheus Install Docker Install
at &amp;lt;&amp;lt;EOF &amp;gt; prometheus.yml global: scrape_interval: 10s evaluation_interval: 10s scrape_configs: - job_name: &#39;prometheus&#39; static_configs: - targets: [&#39;localhost:9090&#39;] EOF This tells the Prometheus server to scrape itself on port 9090. Now let&#39;s create a Dockerfile that adds this on top of the prom/prometheus image: cat &amp;lt;&amp;lt;EOF &amp;gt; Dockerfile FROM prom/prometheus # Add in the configuration file from the local directory. ADD prometheus.yml /etc/prometheus/prometheus.yml EOF  Next we can build and run it:</description>
    </item>
    
  </channel>
</rss>