<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DevOps on Hugo Ivy</title>
    <link>https://kkarthik23.github.io/categories/devops/</link>
    <description>Recent content in DevOps on Hugo Ivy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 May 2019 21:57:42 +0000</lastBuildDate>
    
	<atom:link href="https://kkarthik23.github.io/categories/devops/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS Athena</title>
      <link>https://kkarthik23.github.io/post/2019/05/30/aws-athena/</link>
      <pubDate>Thu, 30 May 2019 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2019/05/30/aws-athena/</guid>
      <description> Athena for example abl_logs is the database and table is haproxy_tls_inbound_dev
SELECT * FROM &amp;quot;alb_logs&amp;quot;.&amp;quot;haproxy_tls_inbound_dev&amp;quot; limit 10;  </description>
    </item>
    
    <item>
      <title>Python setup windows</title>
      <link>https://kkarthik23.github.io/post/2019/05/20/python-setup-windows/</link>
      <pubDate>Mon, 20 May 2019 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2019/05/20/python-setup-windows/</guid>
      <description>For Windows, virtualenv venv creates a virtual environment However, activating the environment requires a slightly different command.
Assuming that you are in your project directory:
C:\Users\SomeUser\project_folder&amp;gt; venv\Scripts\activate or source venv/bin/activate (if Linux)
Install packages using the pip command:
$ pip install requests $ deactivate
for reactivating it is venv\Scripts\activate
AWS app deploy using Boto Before you can deploy an application, be sure you have credentials configured. If you have previously configured your machine to run boto3 (the AWS SDK for Python) or the AWS CLI then you can skip this section.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://kkarthik23.github.io/post/2019/04/20/docker/</link>
      <pubDate>Sat, 20 Apr 2019 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2019/04/20/docker/</guid>
      <description>Docker containers
Install Docker CE(Community Edition) $ sudo yum install -y yum-utils \ device-mapper-persistent-data \ lvm2$ sudo yum-config-manager \ $ sudo yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo $ sudo yum install docker-ce docker-ce-cli containerd.io $ sudo systemctl start docker $ sudo systemctl enable docker (start at boot) $ sudo docker run hello-world (pulls image from docker libaray and indicates docker is working okay)  Above command displays the below
Unable to find image &#39;hello-world:latest&#39; locally latest: Pulling from library/hello-world 1b930d010525: Pull complete Digest: sha256:92695bc579f31df7a63da6922075d0666e565ceccad16b59c3374d2cf4e8e50e Status: Downloaded newer image for hello-world:latest Hello from Docker!</description>
    </item>
    
  </channel>
</rss>thub.io/post/2016/11/12/a-case-for-software-load-balancing/</link>
      <pubDate>Sat, 12 Nov 2016 21:57:42 +0000</pubDate>
      
      <guid>https://kkarthik23.github.io/post/2016/11/12/a-case-for-software-load-balancing/</guid>
      <description>You can runÂ software load balancers on commodity hardware.
Plus virtualisation,containers like docker and tools like puppet and ansible help to leverage software load balancer to the maximum extent.
Unless your requirement is really really big software load balancers should suffice. Nginx does a good job and you can go with Nginx plus for paid support,more features and peace of mind.
There is good documentation on the Nginx website and so I will not be repeating the steps.</description>
    </item>
    
  </channel>
</rss>